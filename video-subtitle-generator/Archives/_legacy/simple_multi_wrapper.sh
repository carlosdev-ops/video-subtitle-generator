#!/bin/bash

# Wrapper simple pour traiter plusieurs vid√©os avec monitoring sympathique
# GARDE VOTRE SCRIPT ORIGINAL INTACT - juste l'appelle plusieurs fois
# Usage: ./multi_wrapper.sh

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Animation de progression
SPINNER_CHARS="‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è"
PROGRESS_BARS="‚ñè‚ñé‚ñç‚ñå‚ñã‚ñä‚ñâ‚ñà"

# Fonction d'animation pendant l'attente
show_progress() {
    local message="$1"
    local duration="$2"
    local steps=$((duration * 4)) # 4 updates par seconde
    
    for ((i=0; i<=steps; i++)); do
        local spinner_char="${SPINNER_CHARS:$((i % ${#SPINNER_CHARS})):1}"
        local progress=$((i * 100 / steps))
        local bar_length=$((progress / 5)) # Barre de 20 caract√®res max
        
        # Construction de la barre de progression
        local bar=""
        for ((j=0; j<bar_length && j<20; j++)); do
            if [ $j -eq $((bar_length-1)) ] && [ $progress -lt 100 ]; then
                local partial_idx=$((progress % 5))
                [ $partial_idx -gt 0 ] && bar+="${PROGRESS_BARS:$partial_idx:1}" || bar+="‚ñà"
            else
                bar+="‚ñà"
            fi
        done
        
        # Compl√©ter la barre avec des espaces
        while [ ${#bar} -lt 20 ]; do
            bar+="‚ñë"
        done
        
        printf "\r${CYAN}$spinner_char${NC} $message ${BLUE}[$bar]${NC} ${WHITE}$progress%%${NC}"
        sleep 0.25
        
        # Sortir si le processus est termin√©
        [ ! -f "/tmp/processing_active" ] && break
    done
    printf "\n"
}

# Fonction pour estimer la dur√©e bas√©e sur la taille du fichier
estimate_duration() {
    local file_size_mb=$(du -m "$1" 2>/dev/null | cut -f1)
    # Estimation tr√®s approximative: ~2-5 minutes par 100MB
    local estimated_minutes=$((file_size_mb * 3 / 100))
    [ $estimated_minutes -lt 2 ] && estimated_minutes=2
    [ $estimated_minutes -gt 60 ] && estimated_minutes=60
    echo $estimated_minutes
}

# Animation d'introduction
intro_animation() {
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë${NC}    üé¨ ${WHITE}G√âN√âRATEUR MULTI-SOUS-TITRES${NC}    ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïë${NC}       ${CYAN}Version Sympathique v2.0${NC}        ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    
    # Animation des points
    for i in {1..3}; do
        printf "${YELLOW}Initialisation"
        for j in {1..3}; do
            sleep 0.3
            printf "."
        done
        sleep 0.3
        printf "\r                    \r"
    done
    
    echo -e "${GREEN}‚ú® Pr√™t √† traiter vos vid√©os !${NC}\n"
}

intro_animation

echo -e "${WHITE}üìù Garde votre script original intact !${NC}"

# V√©rification que le script original existe
if [ ! -f "./generate_subtitles.sh" ]; then
    echo -e "${RED}‚ùå Script original './generate_subtitles.sh' non trouv√©${NC}"
    echo -e "${WHITE}   Placez ce wrapper dans le m√™me dossier que votre script qui marche${NC}"
    exit 1
fi

# D√©tection automatique de l'environnement virtuel
AUTO_VENV_ACTIVATION=""
if [ -d "venv" ]; then
    echo -e "${CYAN}üêç Environnement virtuel d√©tect√©${NC}"
    
    # V√©rifier si le script original active d√©j√† l'environnement
    if grep -q "source.*venv.*activate" "./generate_subtitles.sh" 2>/dev/null; then
        echo -e "${GREEN}   ‚úÖ Script original g√®re d√©j√† l'activation${NC}"
    else
        echo -e "${YELLOW}   ‚ö†Ô∏è  Script original n'active pas l'environnement${NC}"
        echo -e "${WHITE}   ‚Üí Le wrapper va l'activer automatiquement${NC}"
        AUTO_VENV_ACTIVATION="source venv/bin/activate &&"
    fi
else
    echo -e "${WHITE}‚ÑπÔ∏è  Aucun environnement virtuel d√©tect√© (utilisation globale)${NC}"
fi

# Cr√©ation des dossiers de logs
mkdir -p logs
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
LOG_FILE="logs/multi_processing_${TIMESTAMP}.log"

# Fonction de logging avec couleurs
log() {
    local message="$1"
    local level="${2:-info}"
    local timestamp=$(date "+%H:%M:%S")
    
    case $level in
        "success") echo -e "${GREEN}[$timestamp] ‚úÖ $message${NC}" | tee -a "$LOG_FILE" ;;
        "error")   echo -e "${RED}[$timestamp] ‚ùå $message${NC}" | tee -a "$LOG_FILE" ;;
        "warning") echo -e "${YELLOW}[$timestamp] ‚ö†Ô∏è  $message${NC}" | tee -a "$LOG_FILE" ;;
        "info")    echo -e "${BLUE}[$timestamp] ‚ÑπÔ∏è  $message${NC}" | tee -a "$LOG_FILE" ;;
        *)         echo -e "${WHITE}[$timestamp] $message${NC}" | tee -a "$LOG_FILE" ;;
    esac
}

# Fonction pour nettoyer les noms (juste les caract√®res vraiment probl√©matiques)
clean_name() {
    echo "$1" | sed 's/[^a-zA-Z0-9._-]/_/g' | sed 's/__*/_/g'
}

# D√©tection automatique des vid√©os
log "üîç Recherche des vid√©os dans input/"
VIDEO_FILES=()

# Utiliser find (plus robuste que les globs)
while IFS= read -r -d '' file; do
    VIDEO_FILES+=("$file")
done < <(find input -maxdepth 1 -type f \( -iname "*.mp4" -o -iname "*.mov" -o -iname "*.avi" -o -iname "*.mkv" -o -iname "*.wmv" \) -print0 2>/dev/null)

if [ ${#VIDEO_FILES[@]} -eq 0 ]; then
    log "Aucune vid√©o trouv√©e dans input/" "error"
    echo -e "${CYAN}üí° Conseil: Placez vos vid√©os (.mp4, .mov, .avi, .mkv, .wmv) dans le dossier input/${NC}"
    echo -e "${WHITE}   Exemple: cp *.mp4 input/${NC}"
    exit 1
fi

echo -e "\n${CYAN}üîç Analyse termin√©e !${NC}"
log "${#VIDEO_FILES[@]} vid√©o(s) d√©tect√©e(s)" "success"

# Affichage sympathique de la liste
echo -e "\n${WHITE}üìπ Vid√©os √† traiter:${NC}"
total_size_mb=0
for i in "${!VIDEO_FILES[@]}"; do
    file="${VIDEO_FILES[$i]}"
    name=$(basename "$file")
    size_mb=$(du -m "$file" 2>/dev/null | cut -f1)
    total_size_mb=$((total_size_mb + size_mb))
    estimated_min=$(estimate_duration "$file")
    
    printf "${PURPLE}   %2d.${NC} ${WHITE}%-30s${NC} ${CYAN}(%3dMB ~%2dmin)${NC}\n" $((i+1)) "$name" "$size_mb" "$estimated_min"
done

echo -e "\n${YELLOW}üìä R√©sum√©:${NC}"
echo -e "   ${WHITE}Total:${NC} ${#VIDEO_FILES[@]} vid√©os ‚Ä¢ ${CYAN}${total_size_mb}MB${NC} ‚Ä¢ ${PURPLE}~$((total_size_mb * 3 / 100))min estim√©${NC}"

# Sauvegarde du dossier output original (s'il existe)
if [ -d "output" ] && [ "$(ls -A output 2>/dev/null)" ]; then
    BACKUP_DIR="output_backup_${TIMESTAMP}"
    log "Sauvegarde output existant ‚Üí $BACKUP_DIR" "warning"
    cp -r output "$BACKUP_DIR"
fi

# Confirmation avant d√©marrage
echo -e "\n${YELLOW}‚ö° Pr√™t √† d√©marrer le traitement !${NC}"
echo -e "${WHITE}   Appuyez sur ${GREEN}[Entr√©e]${WHITE} pour continuer ou ${RED}Ctrl+C${WHITE} pour annuler${NC}"
read -r

echo -e "\n${GREEN}üöÄ D√©marrage du traitement...${NC}\n"

# Variables de statistiques
SUCCESS_COUNT=0
ERROR_COUNT=0
START_TIME=$(date +%s)

# Traitement de chaque vid√©o avec monitoring sympathique
for i in "${!VIDEO_FILES[@]}"; do
    VIDEO_FILE="${VIDEO_FILES[$i]}"
    VIDEO_NAME=$(basename "$VIDEO_FILE" | sed 's/\.[^.]*$//')
    CLEAN_NAME=$(clean_name "$VIDEO_NAME")
    CURRENT=$((i + 1))
    TOTAL=${#VIDEO_FILES[@]}
    
    # En-t√™te de section avec style
    echo -e "\n${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë${NC}  üé¨ ${WHITE}[$CURRENT/$TOTAL] $VIDEO_NAME${NC} $(printf "%*s" $((50-${#VIDEO_NAME})) "") ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    
    # Nettoyer le dossier output pour cette vid√©o
    rm -rf output/*
    
    # Copier la vid√©o courante
    if cp "$VIDEO_FILE" "input/video.mp4"; then
        log "Pr√©paration: $(basename "$VIDEO_FILE") ‚Üí video.mp4" "info"
    else
        log "√âchec copie de $VIDEO_FILE" "error"
        ERROR_COUNT=$((ERROR_COUNT + 1))
        continue
    fi
    
    # Lancer VOTRE script original avec monitoring
    echo -e "${CYAN}üîÑ Traitement en cours...${NC}"
    PROCESS_START=$(date +%s)
    
    # Cr√©er un marqueur pour le monitoring
    touch /tmp/processing_active
    
    # Estimer la dur√©e
    ESTIMATED_MINUTES=$(estimate_duration "$VIDEO_FILE")
    
    # Lancer le monitoring en arri√®re-plan
    (
        show_progress "Transcription et traduction" $((ESTIMATED_MINUTES * 60))
    ) &
    MONITOR_PID=$!
    
    # Lancer votre script original avec gestion automatique de l'environnement
    if eval "$AUTO_VENV_ACTIVATION timeout $((ESTIMATED_MINUTES * 60 + 300)) ./generate_subtitles.sh" >> "$LOG_FILE" 2>&1; then
        # Arr√™ter le monitoring
        rm -f /tmp/processing_active
        kill $MONITOR_PID 2>/dev/null || true
        wait $MONITOR_PID 2>/dev/null || true
        
        PROCESS_END=$(date +%s)
        PROCESS_TIME=$((PROCESS_END - PROCESS_START))
        
        printf "\r${GREEN}‚úÖ Traitement termin√© en %dm%ds                    ${NC}\n" $((PROCESS_TIME / 60)) $((PROCESS_TIME % 60))
        
        # Cr√©er un dossier d√©di√© pour cette vid√©o
        FINAL_OUTPUT_DIR="output_final/$CLEAN_NAME"
        mkdir -p "$FINAL_OUTPUT_DIR"
        
        # Sauvegarder tous les fichiers g√©n√©r√©s
        if cp -r output/* "$FINAL_OUTPUT_DIR/" 2>/dev/null; then
            log "Fichiers sauv√©s dans: $FINAL_OUTPUT_DIR/" "success"
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            
            # V√©rifier le fichier final avec animation
            if [ -f "$FINAL_OUTPUT_DIR/subtitles_en.vtt" ]; then
                VTT_LINES=$(wc -l < "$FINAL_OUTPUT_DIR/subtitles_en.vtt" 2>/dev/null || echo "0")
                echo -e "${GREEN}   üéØ Fichier VTT g√©n√©r√©: $VTT_LINES lignes${NC}"
                
                # Petit effet de validation
                for j in {1..3}; do
                    printf "${GREEN}   ‚ú®${NC}"
                    sleep 0.2
                done
                printf "\n"
            fi
        else
            rm -f /tmp/processing_active
            kill $MONITOR_PID 2>/dev/null || true
            log "√âchec sauvegarde des fichiers" "error"
            ERROR_COUNT=$((ERROR_COUNT + 1))
        fi
        
    else
        # Arr√™ter le monitoring en cas d'erreur
        rm -f /tmp/processing_active
        kill $MONITOR_PID 2>/dev/null || true
        wait $MONITOR_PID 2>/dev/null || true
        
        printf "\r${RED}‚ùå √âchec du traitement                              ${NC}\n"
        log "√âchec du script pour $VIDEO_NAME" "error"
        ERROR_COUNT=$((ERROR_COUNT + 1))
        
        # Sauvegarder les logs d'erreur quand m√™me
        ERROR_DIR="output_final/${CLEAN_NAME}_ERROR"
        mkdir -p "$ERROR_DIR"
        cp -r output/* "$ERROR_DIR/" 2>/dev/null || true
        echo "Erreur lors du traitement de $VIDEO_NAME - $(date)" > "$ERROR_DIR/ERROR.txt"
    fi
    
    # Nettoyer pour la prochaine vid√©o
    rm -f "input/video.mp4"
    
    # Petit d√©lai pour l'effet visuel
    sleep 0.5
done

# Statistiques finales avec style
END_TIME=$(date +%s)
TOTAL_TIME=$((END_TIME - START_TIME))

echo -e "\n${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${PURPLE}‚ïë${NC}                    üéâ ${WHITE}TRAITEMENT TERMIN√â${NC} üéâ                    ${PURPLE}‚ïë${NC}"
echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"

# Affichage des stats avec couleurs
echo -e "\n${WHITE}üìä Statistiques finales:${NC}"
echo -e "   ${GREEN}‚úÖ R√©ussis: $SUCCESS_COUNT/${#VIDEO_FILES[@]}${NC}"
echo -e "   ${RED}‚ùå √âchecs:  $ERROR_COUNT/${#VIDEO_FILES[@]}${NC}"
echo -e "   ${CYAN}‚è±Ô∏è  Temps total: $((TOTAL_TIME / 60))m$((TOTAL_TIME % 60))s${NC}"

# Calcul du taux de r√©ussite
if [ ${#VIDEO_FILES[@]} -gt 0 ]; then
    SUCCESS_RATE=$((SUCCESS_COUNT * 100 / ${#VIDEO_FILES[@]}))
    if [ $SUCCESS_RATE -eq 100 ]; then
        echo -e "   ${GREEN}üèÜ Taux de r√©ussite: $SUCCESS_RATE% - PARFAIT !${NC}"
    elif [ $SUCCESS_RATE -ge 80 ]; then
        echo -e "   ${YELLOW}‚≠ê Taux de r√©ussite: $SUCCESS_RATE% - Tr√®s bon !${NC}"
    else
        echo -e "   ${RED}‚ö†Ô∏è  Taux de r√©ussite: $SUCCESS_RATE% - √Ä am√©liorer${NC}"
    fi
fi

echo -e "\n${WHITE}üìÇ R√©sultats sauv√©s dans: ${CYAN}output_final/${NC}"

if [ $SUCCESS_COUNT -gt 0 ]; then
    echo -e "\n${GREEN}üéØ Fichiers VTT g√©n√©r√©s:${NC}"
    find output_final -name "subtitles_en.vtt" -exec echo -e "   ${WHITE}{}${NC}" \;
    
    # Animation de fin r√©ussie
    echo -e "\n${GREEN}"
    for i in {1..3}; do
        printf "‚ú® "
        sleep 0.3
    done
    echo -e "Traitement multi-vid√©os r√©ussi ! ‚ú®${NC}"
fi

log "üìã Log complet: $LOG_FILE"

# R√©sum√© final dans une bo√Æte
echo -e "\n${BLUE}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
echo -e "${BLUE}‚îÇ${NC} üé¨ ${WHITE}Traitement multi-vid√©os termin√© !${NC}     ${BLUE}‚îÇ${NC}"
echo -e "${BLUE}‚îÇ${NC} üìÇ ${CYAN}R√©sultats:${NC} output_final/           ${BLUE}‚îÇ${NC}"
echo -e "${BLUE}‚îÇ${NC} üìã ${CYAN}Log:${NC} $LOG_FILE ${BLUE}‚îÇ${NC}"
echo -e "${BLUE}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"

# Nettoyage final
rm -f /tmp/processing_active

